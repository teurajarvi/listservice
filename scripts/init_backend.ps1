# Initialize Terraform remote backend (S3 + DynamoDB lock)
# Usage: .\scripts\init_backend.ps1 -Region "eu-north-1" -Bucket "my-terraform-state-bucket" -Table "terraform-lock-table"

param(
    [Parameter(Mandatory=$true)]
    [string]$Region,
    
    [Parameter(Mandatory=$true)]
    [string]$Bucket,
    
    [Parameter(Mandatory=$true)]
    [string]$Table
)

$ErrorActionPreference = "Stop"

Write-Host "üöÄ Initializing Terraform remote backend..." -ForegroundColor Cyan
Write-Host "   Region: $Region" -ForegroundColor Gray
Write-Host "   Bucket: $Bucket" -ForegroundColor Gray
Write-Host "   Table: $Table" -ForegroundColor Gray
Write-Host ""

# Create S3 bucket for state storage
Write-Host "üì¶ Creating S3 bucket..." -ForegroundColor Yellow
try {
    if ($Region -eq "us-east-1") {
        aws s3api create-bucket --bucket $Bucket --region $Region 2>&1 | Out-Null
    } else {
        aws s3api create-bucket --bucket $Bucket --region $Region --create-bucket-configuration LocationConstraint=$Region 2>&1 | Out-Null
    }
    Write-Host "   ‚úÖ Bucket created: $Bucket" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  Bucket might already exist: $Bucket" -ForegroundColor Yellow
}

# Enable versioning on the bucket
Write-Host "üîÑ Enabling bucket versioning..." -ForegroundColor Yellow
aws s3api put-bucket-versioning --bucket $Bucket --versioning-configuration Status=Enabled
Write-Host "   ‚úÖ Versioning enabled" -ForegroundColor Green

# Enable encryption on the bucket
Write-Host "üîê Enabling bucket encryption..." -ForegroundColor Yellow
aws s3api put-bucket-encryption --bucket $Bucket --server-side-encryption-configuration '{
    "Rules": [
        {
            "ApplyServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
            }
        }
    ]
}'
Write-Host "   ‚úÖ Encryption enabled" -ForegroundColor Green

# Block public access to the bucket
Write-Host "üõ°Ô∏è  Blocking public access..." -ForegroundColor Yellow
aws s3api put-public-access-block --bucket $Bucket --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
Write-Host "   ‚úÖ Public access blocked" -ForegroundColor Green

# Create DynamoDB table for state locking
Write-Host "üîí Creating DynamoDB lock table..." -ForegroundColor Yellow
try {
    aws dynamodb create-table `
        --table-name $Table `
        --attribute-definitions AttributeName=LockID,AttributeType=S `
        --key-schema AttributeName=LockID,KeyType=HASH `
        --billing-mode PAY_PER_REQUEST `
        --region $Region 2>&1 | Out-Null
    Write-Host "   ‚úÖ Table created: $Table" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  Table might already exist: $Table" -ForegroundColor Yellow
}

# Generate backend.tf file
Write-Host "üìù Generating backend.tf..." -ForegroundColor Yellow
$backendConfig = @"
# Auto-generated by init_backend.ps1
# DO NOT commit this file if it contains sensitive information
terraform {
  backend "s3" {
    bucket         = "$Bucket"
    key            = "listservice/terraform.tfstate"
    region         = "$Region"
    dynamodb_table = "$Table"
    encrypt        = true
  }
}
"@

$backendConfig | Set-Content -Path "infra\backend.tf" -Encoding UTF8
Write-Host "   ‚úÖ backend.tf created" -ForegroundColor Green

Write-Host ""
Write-Host "‚úÖ Backend initialization complete!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Next steps:" -ForegroundColor Cyan
Write-Host "   1. cd infra" -ForegroundColor Gray
Write-Host "   2. terraform init -migrate-state" -ForegroundColor Gray
Write-Host "   3. Verify migration: terraform state list" -ForegroundColor Gray
Write-Host "   4. Delete local state files (after verifying):" -ForegroundColor Gray
Write-Host "      - terraform.tfstate" -ForegroundColor Gray
Write-Host "      - terraform.tfstate.backup" -ForegroundColor Gray
Write-Host ""
Write-Host "‚ö†Ô∏è  IMPORTANT: Update .gitignore to exclude backend.tf if it contains secrets" -ForegroundColor Yellow
